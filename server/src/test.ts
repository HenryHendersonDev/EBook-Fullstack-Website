console.log('üöÄ Starting JWT and Redis Testing...');

import jwtService from '@/utils/auth/jwt';
import redisClient from './config/redisConfig';
import prisma from './config/prismaClientConfig';

(async () => {
  try {
    if (!prisma) return;
    await prisma.user.deleteMany();
    await prisma.sessions.deleteMany();
    await prisma.errorLog.deleteMany();

    const user = await prisma.user.create({
      data: {
        email: 'dummyuser@example.com',
        password: 'dummyPassword123',
        name: 'Dummy User',
      },
    });

    let check = 0;
    let currentAccessToken: string;
    const uid = user.id;

    console.log('üîó Connecting to Redis...');
    const client = await redisClient();
    console.log('‚úÖ Connected to Redis!');

    console.log('üîë Signing new access token...');
    const accessToken = await jwtService.sign(uid, client);
    currentAccessToken = accessToken;
    console.log('‚úÖ Access Token Signed!');
    console.log(`üîê Access Token: ${accessToken}`);

    console.log('üîç Verifying access token...');
    const verifyAccessToken = jwtService.verify(accessToken, false);
    console.log('‚úÖ Access Token Verified!');
    console.log(
      `üìú Verified Token Payload: ${JSON.stringify(verifyAccessToken, null, 2)}`
    );

    console.log('üîì Decoding access token...');
    const decodeAccessToken = jwtService.decode(accessToken);
    console.log('‚úÖ Access Token Decoded!');
    console.log(
      `üß© Decoded Token Payload: ${JSON.stringify(decodeAccessToken, null, 2)}`
    );

    console.log('--------------------------');
    console.log('üí° Initial Token Info:');
    console.log(`üîë Access Token: ${accessToken}`);
    console.log(
      `üìú Verified Payload: ${JSON.stringify(verifyAccessToken, null, 2)}`
    );
    console.log(
      `üß© Decoded Payload: ${JSON.stringify(decodeAccessToken, null, 2)}`
    );
    console.log('--------------------------');

    const interval = 60 * 500;
    const maxChecks = 22;

    const intervalId = setInterval(async () => {
      check += 1;
      console.log(`üîÑ Checking token validity (Attempt ${check})...`);

      const verifyAccessToken = jwtService.verify(currentAccessToken, false);
      if (verifyAccessToken) {
        console.log(
          `‚úÖ Token still valid! Payload: ${JSON.stringify(verifyAccessToken, null, 2)}`
        );
      } else {
        console.log('-----------------------------------------');
        console.log('');
        console.log('');
        console.warn(
          '‚ö†Ô∏è Token expired or invalid. Re-signing new access token...'
        );

        const newAccessToken = await jwtService.reSignAccess(
          currentAccessToken,
          client
        );
        console.log('üîÑ New Access Token Signed!');
        console.log(`üîê New Access Token: ${newAccessToken}`);

        currentAccessToken = newAccessToken;
        console.log('‚úÖ Updated current access token.');
        console.log('');
        console.log('-----------------------------------------');
      }

      if (check >= maxChecks) {
        console.log('‚è≥ Stopping token checks after 11 minutes.');
        clearInterval(intervalId);
      }
      console.log('--------------------------');
    }, interval);
  } catch (error) {
    console.log('error', error);
  }
})();
