generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ErrorLog {
  id           Int      @id @default(autoincrement())
  solve        Boolean  @default(false)
  errorType    String
  risk         String
  errorMessage String
  errorDetails Json
  createdAt    DateTime @default(now())

  @@index([createdAt])
}

model User {
  id                      String         @id @default(uuid())
  email                   String         @unique
  password                String
  firstName               String
  lastName                String?
  verified                Boolean        @default(true)
  isEmailVerifiedRequired Boolean        @default(false)
  isTotpEnabled           Boolean        @default(false)
  totpSecret              String?
  role                    UserRole       @default(USER)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  session                 Sessions[]
  otp                     OTP[]
  orders                  Order[]
  reviews                 Review[]
  wishlist                Wishlist?
  wishlistItems           WishlistItem[]
  profileImage            String?
  imagePublicID           String?
}

model OTP {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  otp       String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sessions {
  id        String   @id @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id            String         @id @default(uuid())
  title         String
  description   String
  price         Float
  stock         Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  images        String[]
  categoryId    String
  reviews       Review[]
  orderItems    OrderItem[]
  pdfFiles      PdfFile[]
  wishlistItems WishlistItem[]
  category      Category       @relation(fields: [categoryId], references: [id])
}

model Order {
  id            String        @id @default(uuid())
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        OrderStatus   @default(PENDING)
  totalAmount   Float
  orderItems    OrderItem[]
  user          User          @relation(fields: [userId], references: [id])
  paymentStatus PaymentStatus @default(NON)
  Payment       Payment?
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id     String         @id @default(uuid())
  userId String         @unique
  user   User           @relation(fields: [userId], references: [id])
  items  WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlistId String
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  paymentMethod PaymentMethod
  amount        Float
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Order         @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  STRIPE
  PAYPAL
  VISA
  AMERICAN_EXPRESS
}

enum PaymentStatus {
  NON
  PENDING
  SUCCESS
  FAILED
}

model PdfFile {
  id        String   @id @default(uuid())
  productId String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Discount {
  id         String   @id @default(uuid())
  code       String   @unique
  percentage Int
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model NewsletterSubscription {
  id         String   @id @default(uuid())
  email      String   @unique
  subscribed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
